#
# Generate CNN-like training data with a board representation inspired by AlphaGo/Zero chess.
#
#
# Input: *.csv file generated by select_random_positions_simple.py
# Tuples of fen,uci,san
#
# Output: RecordIO files of tf.Example
#
# Schema:
#   board:
#   label:
#   fen:
#
# Algorithm:
#
#
#
import glob
import os, sys
import random
import time

from absl import app
from absl import flags
from absl import logging

import chess
import chess.pgn

import numpy as np

import tensorflow as tf

from encode import encode_cnn_board_move_wtm
from pychess_util import *
from tf_util import *


FLAGS = flags.FLAGS

flags.DEFINE_string('csv', '', 'CSV file of fen,uci,san')
flags.DEFINE_string('out', '', 'Recordio file')
flags.DEFINE_integer('shards', 1, 'Number of shards')


def shuffled(ar):
  random.shuffle(ar)
  return ar


def main(argv):
  assert FLAGS.csv
  assert FLAGS.out
  assert FLAGS.shards > 0

  t_start = time.time()
  opts = tf.io.TFRecordOptions(
    compression_type='ZLIB',
    output_buffer_size=(4 * 1024 * 1024))

  if FLAGS.shards == 1:
    rio = [tf.io.TFRecordWriter(FLAGS.out, opts)]
  else:
    rio = [
      tf.io.TFRecordWriter(f'{FLAGS.out}-{shard:05d}-of-{FLAGS.shards:05d}.recordio', opts)
      for shard in range(FLAGS.shards)]

  n_game, n_move, n_gen, n_dup = 0, 0, 0, 0
  t0 = time.time()

  with open(FLAGS.csv, 'r') as f:
    lines = shuffled(f.readlines())

  for row, line in enumerate(lines):
    if row % 50000 == 0:
      dt = time.time() - t0
      print(f'{dt:.1f}s {row}')
    fen, uci, san = line.strip().split(',')[0:3]  # Ignore possible SF score.
    n_gen += 1
    enc_board, enc_move = encode_cnn_board_move_wtm(chess.Board(fen), chess.Move.from_uci(uci))
    feature = {
      'board': floats_feature(enc_board.flatten()),
      'label': int64_feature(enc_move),
      'fen':  bytes_feature(fen.encode('utf-8')),
    }
    pb = tf.train.Example(features=tf.train.Features(feature=feature))
    rio[random.randint(0, FLAGS.shards-1)].write(pb.SerializeToString())

  for fh in rio:
    fh.close()

  print('n_game: ', n_game)
  print('n_move: ', n_move)
  print('n_dup: ', n_dup)
  print('n_gen: ', n_gen)



if __name__ == '__main__':
  app.run(main)
